{
	"info": {
		"_postman_id": "b2f95994-9967-4077-a00c-f9f372916f7c",
		"name": "atris",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "workspace_management",
			"item": [
				{
					"name": "create workspace",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"workspace_name\": \"first\",\r\n    \"emoji\": \"ðŸ˜‚\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:8000/api/create_workspace/",
							"host": [
								"{{host}}"
							],
							"port": "8000",
							"path": [
								"api",
								"create_workspace",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "rename_workspace",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"old_workspace_name\": \"fsadfas\",\r\n  \"new_workspace_name\": \"fsa1dfas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/rename_workspace/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"rename_workspace",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_workspace",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"workspace_name\": \"fsa1dfas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/delete_workspace/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"delete_workspace",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "display_all_notes",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"workspace_id\": \"606c94dbcc6e1a40f9818537\"\r\n}"
						},
						"url": {
							"raw": "localhost:8000/api/display_all_notes",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"display_all_notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "display_all_workspaces",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8000/api/display_workspaces",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"display_workspaces"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "verify_user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoidmVyaWZ5IiwiZW1haWxfaWQiOiJqYWluYWwwOWdvc2FsaWFAZ21haWwuY29tIiwidXNlcl9uYW1lIjoianNnIiwiaWQiOiI2MDE2ZGU5YjdiYzI5MzA0ZmQwYzU0YmEiLCJleHAiOjE2MTIxOTgyNzcuNDE1NTEzfQ.iE7C7TWN9f_Bmj6uxc3ddL9ypQqPao-x_0kKzGxTJj4",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/verify-user/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"verify-user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "forgot_password",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/forgot-password/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"forgot-password",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"jainal@atrisapp.com\",\r\n  \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:8000/api/login",
							"host": [
								"{{host}}"
							],
							"port": "8000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout_from_devices",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/logout_all_devices",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"logout_all_devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_access_token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaF90b2tlbiIsImVtYWlsX2lkIjoiamFpbmFsQGF0cmlzYXBwLmNvbSIsImFjY291bnRfdHlwZSI6Ik5vcm1hbCIsInZlcmlmaWVkIjp0cnVlLCJleHAiOjE2NDcyMTQ2NDIuOTYwMzQzfQ.N141YHYoEqGk-9VZg-kLBS_xzn9bkAR8SEWe0xky7qA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{host}}:8000/api/get_access_token/",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "8000",
							"path": [
								"api",
								"get_access_token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "signup",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_name\": \"string\",\r\n  \"email\": \"jainal@atrisapp.com\",\r\n  \"first_name\": \"string\",\r\n  \"last_name\": \"string\",\r\n  \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:8000/api/register/",
							"host": [
								"{{host}}"
							],
							"port": "8000",
							"path": [
								"api",
								"register",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_settings",
			"item": [
				{
					"name": "get_user_data",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoidmVyaWZ5IiwiZW1haWxfaWQiOiJqYWluYWwwOWdvc2FsaWFAZ21haWwuY29tIiwidXNlcl9uYW1lIjoianNnIiwiaWQiOiI2MDE2ZGU5YjdiYzI5MzA0ZmQwYzU0YmEiLCJleHAiOjE2MTIxOTgyNzcuNDE1NTEzfQ.iE7C7TWN9f_Bmj6uxc3ddL9ypQqPao-x_0kKzGxTJj4",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/user_data/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"user_data",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "change user params",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzX3Rva2VuIiwiZW1haWxfaWQiOiJqYWluYWxnb3NhbGl5YUBnbWFpbC5jb20iLCJhY2NvdW50X3R5cGUiOiJOb3JtYWwiLCJwbGFuIjoiRnJlZSIsImV4cCI6MTYwODk2MTU2My44OTc3Nn0.02aggBqLg4fWQc74owD0eDcWdKk6WrhDn5grgK50E2o",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \" dssd\",\r\n    \"lastname\": \" dsdsd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/change_user/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"change_user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "change profile photo",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzX3Rva2VuIiwiZW1haWxfaWQiOiJqYWluYWxnb3NhbGl5YUBnbWFpbC5jb20iLCJhY2NvdW50X3R5cGUiOiJOb3JtYWwiLCJwbGFuIjoiRnJlZSIsImV4cCI6MTYwOTAwNDczOS45Nzk4MzV9.mXavvAwq2XCcoAjTdII6-PfgE9255KPRFXt8_evpH2A",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/atris/Downloads/Jainal (1).png"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/change_profile/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"change_profile",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "notes",
			"item": [
				{
					"name": "audios",
					"item": [
						{
							"name": "upload_audio",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Length",
										"value": "2000",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/D:/atris/main-server/1.wav"
										},
										{
											"key": "audio_request_id",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "notes_id",
											"value": "60701d716a820af96a80a0d1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/upload_audio/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"upload_audio",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_audio_data",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "127.0.0.1:8000/api/get_audio_data/?notes_id=60701d716a820af96a80a0d1",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"get_audio_data",
										""
									],
									"query": [
										{
											"key": "notes_id",
											"value": "60701d716a820af96a80a0d1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_audio",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"audio_id\": \"606dee302ca238260bedb164\",\r\n  \"notes_id\": \"606e05769a12f75b7766dac1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "127.0.0.01:8000/api/delete_audio/",
									"host": [
										"127",
										"0",
										"0",
										"01"
									],
									"port": "8000",
									"path": [
										"api",
										"delete_audio",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "rename_audio",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"audio_id\": \"606def3f2ca238260bedb165\",\r\n  \"new_name\": \"corporate call\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "127.0.0.1:8000/api/rename_audio/",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"rename_audio",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "images",
					"item": [
						{
							"name": "upload_image",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										},
										{
											"key": "notes_id",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/upload_image/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"upload_image",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_image",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"image_id\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/delete_image/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"delete_image",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "summary",
					"item": [
						{
							"name": "add_mannual_summary",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes_id\": \"string\",\r\n  \"summary\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/gen_smry_kwrds/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"gen_smry_kwrds",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "generate_summary",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes_id\": \"60701d716a820af96a80a0d1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/gen_smry_kwrds/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"gen_smry_kwrds",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete_note",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"notes_id\": \"606ec61d82a27c5b0ae457f5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/delete_note/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"delete_note",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "rename_notes",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"old_notes_id\": \"604683ae49d6029bd645b47b\",\r\n  \"new_notes_name\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/rename_note/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"rename_note",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create_note",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"work_space_id\": \"60701d636a820af96a80a0d0\",\r\n    \"notes_name\": \"my_new_note\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:8000/api/create_note/",
							"host": [
								"{{host}}"
							],
							"port": "8000",
							"path": [
								"api",
								"create_note",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "save_note",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"work_space_id\": \"60701d636a820af96a80a0d0\",\r\n    \"notes_id\": \"60701d716a820af96a80a0d1\",\r\n    \"data\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:8000/api/save_note/",
							"host": [
								"{{host}}"
							],
							"port": "8000",
							"path": [
								"api",
								"save_note",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_note",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{host}}:8000/api/get_note?notes_id=606ec61d82a27c5b0ae457f5",
							"host": [
								"{{host}}"
							],
							"port": "8000",
							"path": [
								"api",
								"get_note"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "notes_id",
									"value": "606ec61d82a27c5b0ae457f5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "star_note",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"notes_id\": \"605cdb942f01e18016d63ff7\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:8000/api/star_note/",
							"host": [
								"{{host}}"
							],
							"port": "8000",
							"path": [
								"api",
								"star_note",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "generate_entities_emotions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"notes_id\": \"60701d716a820af96a80a0d1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8000/api/generate_entity_emotion/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"generate_entity_emotion",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tags",
			"item": [
				{
					"name": "add_tag",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tags_name\": [\"stringðŸ‘¿\"],\r\n  \"workspace_id\": \"606eaf56238ae6eda1075f4c\",\r\n  \"notes_id\": \"606fffe0dc4652daa1c7904b\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:8000/api/add_tags/",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "8000",
							"path": [
								"api",
								"add_tags",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_tag",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzX3Rva2VuIiwiZW1haWxfaWQiOiJqYWluYWwuZ29zYWxpeWFAZ2xpYi5haSIsImFjY291bnRfdHlwZSI6Ik5vcm1hbCIsInBsYW4iOiJGcmVlIiwiZXhwIjoxNjE0OTc2Mzk3LjE2ODk3OH0.Sbz4UdJqSEJwSp33AO8m_9R606EiS8niZ5D_G88jtmM",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tag_id\": \"60428fea93c9f1db64fa7bec\",\r\n  \"notes_id\": \"60428ec1891cc8678ee905c2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/delete_tags/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"delete_tags",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "recommend_tags",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/get_matching_tags/?tag_name",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"get_matching_tags",
								""
							],
							"query": [
								{
									"key": "tag_name",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "stt",
			"request": {
				"method": "GET",
				"header": [],
				"url": null
			},
			"response": []
		},
		{
			"name": "emotion",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{MICRO_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://52.188.166.61:8007/analysis//",
					"protocol": "http",
					"host": [
						"52",
						"188",
						"166",
						"61"
					],
					"port": "8007",
					"path": [
						"analysis",
						"",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "health_check",
			"request": {
				"method": "GET",
				"header": [],
				"url": null
			},
			"response": []
		},
		{
			"name": "blob",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": null
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4ce8bcd5-d40e-42a9-8636-c649435e2505",
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaF90b2tlbiIsImVtYWlsX2lkIjoiZmFpemFuNDVzaGFpa2hAZ21haWwuY29tIiwiYWNjb3VudF90eXBlIjoiTm9ybWFsIiwidmVyaWZpZWQiOnRydWUsImV4cCI6MTY0NTk2MzM3NS4xNzk3MzR9.34ejQJT9KMqi85SDDLPMBhhJPLWbHrEoAYHlQ4GaAgM"
		},
		{
			"id": "f8f87758-5ae3-430c-be38-82a13c43c3f3",
			"key": "host",
			"value": ""
		},
		{
			"id": "56a4e90f-326a-4249-9ceb-6e1fed46435f",
			"key": "MICRO_TOKEN",
			"value": ""
		}
	]
}